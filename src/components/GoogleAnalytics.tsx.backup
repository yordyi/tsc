'use client';

import Script from 'next/script';
import { useEffect } from 'react';

interface GoogleAnalyticsProps {
  measurementId?: string;
}

declare global {
  interface Window {
    gtag: (...args: any[]) => void;
    dataLayer: any[];
  }
}

export function GoogleAnalytics({ measurementId }: GoogleAnalyticsProps) {
  useEffect(() => {
    // 早期返回，防止错误
    if (\!measurementId || typeof window === 'undefined') return;

    try {
      // 安全初始化 dataLayer
      window.dataLayer = window.dataLayer || [];
      
      function gtag(...args: any[]) {
        if (window.dataLayer) {
          window.dataLayer.push(args);
        }
      }

      // 配置 GA4
      gtag('js', new Date());
      gtag('config', measurementId, {
        page_title: document?.title || '',
        page_location: window?.location?.href || '',
      });

      // 监听路由变化的安全处理
      const handleRouteChange = () => {
        try {
          if (window.gtag && measurementId) {
            gtag('config', measurementId, {
              page_title: document?.title || '',
              page_location: window?.location?.href || '',
            });
          }
        } catch (error) {
          console.warn('[GA] Route change tracking error:', error);
        }
      };

      // 监听路由变化（Next.js）
      window.addEventListener('popstate', handleRouteChange);

      return () => {
        window.removeEventListener('popstate', handleRouteChange);
      };
    } catch (error) {
      console.warn('[GA] Initialization error:', error);
    }
  }, [measurementId]);

  // 如果没有 measurementId，不渲染任何内容
  if (\!measurementId || typeof window === 'undefined') {
    return null;
  }

  return (
    <>
      <Script
        src={`https://www.googletagmanager.com/gtag/js?id=${measurementId}`}
        strategy="afterInteractive"
        onError={(e) => {
          console.warn('[GA] Script loading error:', e);
        }}
      />
      <Script
        id="google-analytics"
        strategy="afterInteractive"
        onError={(e) => {
          console.warn('[GA] Config script error:', e);
        }}
        dangerouslySetInnerHTML={{
          __html: `
            try {
              window.dataLayer = window.dataLayer || [];
              function gtag(){dataLayer.push(arguments);}
              gtag('js', new Date());
              gtag('config', '${measurementId}', {
                page_title: document.title || '',
                page_location: window.location.href || '',
              });
            } catch (error) {
              console.warn('[GA] Inline script error:', error);
            }
          `,
        }}
      />
    </>
  );
}

// Custom analytics events for timestamp converter
export const trackEvent = (
  action: string,
  category: string = 'engagement',
  label?: string,
  value?: number
) => {
  try {
    if (typeof window \!== 'undefined' && window.gtag) {
      window.gtag('event', action, {
        event_category: category,
        event_label: label,
        value: value,
      });
    }
  } catch (error) {
    console.warn('[GA] Event tracking error:', error);
  }
};

// Specific events for the timestamp converter
export const analytics = {
  // Conversion events
  trackTimestampConversion: (inputType: 'timestamp' | 'date', timezone?: string) => {
    const label = inputType + '_' + (timezone || 'default');
    trackEvent('convert_timestamp', 'conversion', label);
  },

  trackBatchConversion: (count: number) => {
    trackEvent('batch_convert', 'conversion', 'batch_operation', count);
  },

  trackTimezoneChange: (timezone: string) => {
    trackEvent('change_timezone', 'interaction', timezone);
  },

  trackFormatChange: (format: string) => {
    trackEvent('change_format', 'interaction', format);
  },

  trackCodeExampleCopy: (language: string) => {
    trackEvent('copy_code_example', 'engagement', language);
  },

  trackFeatureCardClick: (feature: string) => {
    trackEvent('click_feature_card', 'navigation', feature);
  },

  trackHistoryView: () => {
    trackEvent('view_conversion_history', 'engagement');
  },

  trackHistoryClear: (count: number) => {
    trackEvent('clear_history', 'interaction', 'history_clear', count);
  },

  // SEO events
  trackPWAInstall: () => {
    trackEvent('pwa_install', 'engagement', 'app_install');
  },

  trackPWAPrompt: () => {
    trackEvent('pwa_prompt_shown', 'engagement', 'install_prompt');
  },

  trackShareClick: (method: string) => {
    trackEvent('share_click', 'engagement', method);
  },

  // Performance events
  trackPerformance: (metric: string, value: number) => {
    trackEvent('performance_metric', 'performance', metric, Math.round(value));
  },

  // Error tracking
  trackError: (error: string, context?: string) => {
    const label = error + '_' + (context || 'unknown');
    trackEvent('error_occurred', 'error', label);
  },
};
EOF < /dev/null